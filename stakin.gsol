// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract StakingContract is Ownable {
    IERC20 public stakingToken;
    uint256 public stakingDuration;
    uint256 public stakingReward;

    mapping(address => uint256) public stakedBalance;
    mapping(address => uint256) public stakingStartTime;

    constructor(address _stakingToken, uint256 _stakingDuration, uint256 _stakingReward) {
        stakingToken = IERC20(_stakingToken);
        stakingDuration = _stakingDuration;
        stakingReward = _stakingReward;
    }

    function stakeTokens(uint256 amount) external {
        require(amount > 0, "Amount must be greater than 0");
        require(stakingToken.transferFrom(msg.sender, address(this), amount), "Transfer of staking tokens failed");

        stakedBalance[msg.sender] += amount;
        stakingStartTime[msg.sender] = block.timestamp;
    }

    function withdrawStake() external {
        require(stakedBalance[msg.sender] > 0, "No stake to withdraw");
        require(block.timestamp >= stakingStartTime[msg.sender] + stakingDuration, "Staking duration not completed yet");

        uint256 reward = calculateReward(msg.sender);
        uint256 totalAmount = stakedBalance[msg.sender] + reward;

        stakedBalance[msg.sender] = 0;
        stakingStartTime[msg.sender] = 0;

        require(stakingToken.transfer(msg.sender, totalAmount), "Transfer of staking tokens failed");
    }

    function calculateReward(address staker) public view returns (uint256) {
        if (block.timestamp < stakingStartTime[staker] + stakingDuration) {
            return 0;
        }

        uint256 stakingTime = block.timestamp - stakingStartTime[staker];
        return (stakingTime * stakingReward) / stakingDuration;
    }
}
